{"version":3,"sources":["store/toDo/reducer.js","store/toDo/index.js","store/toDo/actionCreators.js","store/toDo/actions.js","store/toDo/selectors.js","components/ToDo.js","App.js","store/index.js","index.js"],"names":["defaultState","titles","addTitle","title","type","removeTitle","getTitles","state","toDo","reducer","arguments","length","undefined","action","update","$push","index","findIndex","el","$splice","ToDo","formText","handleUpdateText","e","value","target","_this","setState","handleAddTitle","props","addTitleAction","handleRemoveTitle","innerText","removeTitleAction","_this2","this","react_default","a","createElement","map","placeholder","onChange","onClick","idx","key","React","Component","connect","dispatch","bindActionCreators","App","className","components_ToDo","combineReducers","store","createStore","rootReducer","render","es","src_App_0","document","getElementById"],"mappings":"gSAGMA,EAAe,CACnBC,OAAQ,ICAKC,ECFS,SAAAC,GAAK,MAAK,CAChCC,KCHuB,YDIvBD,UDAuBE,ECGE,SAAAF,GAAK,MAAK,CACnCC,KCP0B,eDQ1BD,UDJaG,EGLU,SAAAC,GAAK,OAAIA,EAAMC,KAAKP,QHM9BQ,EDCf,WAAiD,IAAjCF,EAAiCG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBV,EAAca,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOT,MACb,IGTqB,YHUnB,OAAOU,IAAOP,EAAO,CACnBN,OAAQ,CAAEc,MAAO,CAACF,EAAOV,UAG7B,IGbwB,eHctB,IAAMa,EAAQT,EAAMN,OAAOgB,UAAU,SAAAC,GAAE,OAAIA,IAAOL,EAAOV,QACzD,OAAOW,IAAOP,EAAO,CACnBN,OAAQ,CAAEkB,QAAS,CAAC,CAACH,EAAO,OAGhC,QACE,OAAOT,IKhBPa,6MACJb,MAAQ,CACNc,SAAU,MAGZC,iBAAmB,SAACC,GAAM,IAChBC,EAAUD,EAAEE,OAAZD,MACRE,EAAKC,SAAS,CAAEN,SAAUG,OAG5BI,eAAiB,WAAM,IACbP,EAAaK,EAAKnB,MAAlBc,SACHA,IAGLK,EAAKG,MAAMC,eAAeT,GAC1BK,EAAKC,SAAS,CAAEN,SAAU,SAG5BU,kBAAoB,SAACR,GAAM,IACjBS,EAAcT,EAAEE,OAAhBO,UACRN,EAAKG,MAAMI,kBAAkBD,4EAGtB,IAAAE,EAAAC,KACClC,EAAWkC,KAAKN,MAAhB5B,OACR,OACEmC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAASrC,EAAOU,OAAS,EAAIV,EAAOsC,IAAI,SAAArB,GAAE,OAAIA,EAAK,QAAS,uEAC5DkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEd,MAAQW,KAAK5B,MAAMc,SACnBmB,YAAY,wFACZC,SAAWN,KAAKb,mBAElBc,EAAAC,EAAAC,cAAA,UAAQI,QAAUP,KAAKP,gBAAvB,oDACAQ,EAAAC,EAAAC,cAAA,UACIrC,EAAOsC,IAAI,SAACrB,EAAIyB,GAAL,OAAaP,EAAAC,EAAAC,cAAA,MAAII,QAAUR,EAAKH,kBAAoBa,IAAMD,GAAQzB,eArCxE2B,IAAMC,WAsDVC,cATS,SAAAxC,GAAK,MAAK,CAChCN,OAAQK,EAAUC,KAGO,SAAAyC,GAAQ,MAAK,CACtClB,eAAgBmB,YAAmB/C,EAAU8C,GAC7Cf,kBAAmBgB,YAAmB5C,EAAa2C,KAGtCD,CAA6C3B,GC7C7C8B,mLARX,OACEd,EAAAC,EAAAC,cAAA,OAAKa,UAAU,OACbf,EAAAC,EAAAC,cAACc,EAAD,cAJUN,qBCDHO,cAAgB,CAC7B7C,SCII8C,EAAQC,YAAYC,GAE1BC,iBACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAUJ,MAAOA,GACflB,EAAAC,EAAAC,cAACqB,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.0f73fa7a.chunk.js","sourcesContent":["import update from 'immutability-helper'\r\nimport { ADD_TITLE, REMOVE_TITLE } from './actions'\r\n\r\nconst defaultState = {\r\n  titles: [],\r\n}\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TITLE: {\r\n      return update(state, {\r\n        titles: { $push: [action.title] },\r\n      })\r\n    }\r\n    case REMOVE_TITLE: {\r\n      const index = state.titles.findIndex(el => el === action.title)\r\n      return update(state, {\r\n        titles: { $splice: [[index, 1]] },\r\n      })\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import reducer from './reducer'\r\nimport * as ActionCreators from './actionCreators'\r\nimport * as Selectors from './selectors'\r\n\r\nexport const { addTitle, removeTitle } = ActionCreators\r\nexport const { getTitles } = Selectors\r\nexport default reducer\r\n","import { ADD_TITLE, REMOVE_TITLE } from './actions'\r\n\r\nexport const addTitle = title => ({\r\n  type: ADD_TITLE,\r\n  title,\r\n})\r\n\r\nexport const removeTitle = title => ({\r\n  type: REMOVE_TITLE,\r\n  title,\r\n})\r\n","export const ADD_TITLE = 'ADD_TITLE'\r\nexport const REMOVE_TITLE = 'REMOVE_TITLE'\r\n","export const getTitles = state => state.toDo.titles\r\n","import React from 'react'\r\nimport connect from 'react-redux/es/connect/connect'\r\nimport { bindActionCreators } from 'redux'\r\nimport { addTitle, removeTitle, getTitles } from '../store/toDo'\r\n\r\nclass ToDo extends React.Component {\r\n  state = {\r\n    formText: '',\r\n  }\r\n\r\n  handleUpdateText = (e) => {\r\n    const { value } = e.target\r\n    this.setState({ formText: value })\r\n  }\r\n\r\n  handleAddTitle = () => {\r\n    const { formText } = this.state\r\n    if (!formText) {\r\n      return\r\n    }\r\n    this.props.addTitleAction(formText)\r\n    this.setState({ formText: '' })\r\n  }\r\n\r\n  handleRemoveTitle = (e) => {\r\n    const { innerText } = e.target\r\n    this.props.removeTitleAction(innerText)\r\n  }\r\n\r\n  render() {\r\n    const { titles } = this.props\r\n    return (\r\n      <div>\r\n        <label>{ titles.length > 0 ? titles.map(el => el + ' | ') : 'Без названия' }</label>\r\n        <div>\r\n          <input\r\n            value={ this.state.formText }\r\n            placeholder=\"Название задачи\"\r\n            onChange={ this.handleUpdateText }\r\n          />\r\n          <button onClick={ this.handleAddTitle }>Добавить</button>\r\n          <ul>\r\n            { titles.map((el, idx) => <li onClick={ this.handleRemoveTitle } key={ idx }>{ el }</li>) }\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  titles: getTitles(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTitleAction: bindActionCreators(addTitle, dispatch),\r\n  removeTitleAction: bindActionCreators(removeTitle, dispatch),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDo)\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport ToDo from './components/ToDo'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDo />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import { combineReducers } from 'redux'\r\nimport toDo from './toDo'\r\n\r\nexport default combineReducers({\r\n  toDo,\r\n})\r\n","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './store'\n\nconst store = createStore(rootReducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}